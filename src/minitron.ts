namespace Constant
{
    export const TAO: number = 6.283185307179586;
}

namespace Color
{
    export function hex2ARGBString(hex, opacity)
    {
        var result = /^#?([\dA-Fa-f]{2})([\dA-Fa-f]{2})([\dA-Fa-f]{2})$/i.exec(hex);
        var r      = parseInt(result[1], 16);
        var g      = parseInt(result[2], 16);
        var b      = parseInt(result[3], 16);

        return ['rgba','(',r,',',g,',',b,',',opacity,')'].join('');
    }
}

class Minitron
{
    private static CHARSET                = {
        " ": ["_____", "_____", "_____", "_____", "_____", "_____", "_____", "_____", "_____"],
        "!": ["_____", "_____", "__.__", "__.__", "__.__", "__.__", "__.__", "_____", "__.__"],
        '"': ["_____", "_____", "_._._", "_._._", "_____", "_____", "_____", "_____", "_____"],
        "#": ["_____", "_____", "_._._", "_._._", ".....", "_._._", ".....", "_._._", "_._._"],
        "$": ["_____", "__.__", "_..._", "._._.", "._.__", "_..._", "__._.", "._._.", "_..._", "__.__"],
        "%": ["_____", "_____", "..__.", "..__.", "___._", "__.__", "_.___", ".__..", ".__.."],
        "'": ["_____", "_____", "__.__", "__.__", "_____", "_____", "_____", "_____", "_____"],
        "&": ["_____", "_____", "_.___", "._.__", "._.__", "_.___", "._._.", ".__._", "_.._."],
        "(": ["_____", "_____", "___._", "__.__", "__.__", "__.__", "__.__", "__.__", "___._"],
        ")": ["_____", "_____", "_.___", "__.__", "__.__", "__.__", "__.__", "__.__", "_.___"],
        "*": ["_____", "_____", "._._.", "_..._", "._._.", "_____", "_____", "_____", "_____"],
        "+": ["_____", "_____", "_____", "_____", "__.__", "__.__", ".....", "__.__", "__.__"],
        ",": ["_____", "_____", "_____", "_____", "_____", "_____", "_____", "_..__", "_..__", "__.__", "_.___"],
        "-": ["_____", "_____", "_____", "_____", "_____", "_____", ".....", "_____", "_____"],
        ".": ["_____", "_____", "_____", "_____", "_____", "_____", "_____", "_..__", "_..__"],
        "/": ["_____", "_____", "____.", "____.", "___._", "__.__", "_.___", ".____", ".____"],
        "0": ["_____", "_____", "_..._", ".___.", ".__..", "._._.", "..__.", ".___.", "_..._"],
        "1": ["_____", "_____", "__.__", "_..__", "__.__", "__.__", "__.__", "__.__", "_..._"],
        "2": ["_____", "_____", "_..._", ".___.", "____.", "__.._", "_.___", ".____", "....."],
        "3": ["_____", "_____", "_..._", ".___.", "____.", "__.._", "____.", ".___.", "_..._"],
        "4": ["_____", "_____", "___._", "__.._", "_._._", ".__._", ".....", "___._", "___._"],
        "5": ["_____", "_____", ".....", ".____", "...._", "____.", "____.", ".___.", "_..._"],
        "6": ["_____", "_____", "__.._", "_.___", ".____", "...._", ".___.", ".___.", "_..._"],
        "7": ["_____", "_____", ".....", "____.", "___._", "__.__", "_.___", "_.___", "_.___"],
        "8": ["_____", "_____", "_..._", ".___.", ".___.", "_..._", ".___.", ".___.", "_..._"],
        "9": ["_____", "_____", "_..._", ".___.", ".___.", "_....", "____.", "___._", "_..__"],
        ":": ["_____", "_____", "_____", "_____", "_..__", "_..__", "_____", "_..__", "_..__"],
        ";": ["_____", "_____", "_____", "_____", "_..__", "_..__", "_____", "_..__", "_..__", "__.__", "_.___"],
        "<": ["_____", "_____", "____.", "___._", "__.__", "_.___", "__.__", "___._", "____."],
        "=": ["_____", "_____", "_____", "_____", ".....", "_____", ".....", "_____", "_____"],
        ">": ["_____", "_____", ".____", "_.___", "__.__", "___._", "__.__", "_.___", ".____"],
        "?": ["_____", "_____", "_..._", ".___.", "____.", "___._", "__.__", "_____", "__.__"],
        "@": ["_____", "_____", "_..._", ".___.", "._...", "._._.", "._...", ".____", "_...."],
        "A": ["_____", "_____", "_..._", ".___.", ".___.", ".....", ".___.", ".___.", ".___."],
        "B": ["_____", "_____", "...._", ".___.", ".___.", "...._", ".___.", ".___.", "...._"],
        "C": ["_____", "_____", "_..._", ".___.", ".____", ".____", ".____", ".___.", "_..._"],
        "D": ["_____", "_____", "...._", ".___.", ".___.", ".___.", ".___.", ".___.", "...._"],
        "E": ["_____", "_____", ".....", ".____", ".____", ".....", ".____", ".____", "....."],
        "F": ["_____", "_____", ".....", ".____", ".____", "...._", ".____", ".____", ".____"],
        "G": ["_____", "_____", "_..._", ".___.", ".____", "._...", ".___.", ".___.", "_...."],
        "H": ["_____", "_____", ".___.", ".___.", ".___.", ".....", ".___.", ".___.", ".___."],
        "I": ["_____", "_____", "_..._", "__.__", "__.__", "__.__", "__.__", "__.__", "_..._"],
        "J": ["_____", "_____", "__...", "___._", "___._", "___._", "___._", ".__._", "_..__"],
        "K": ["_____", "_____", ".___.", ".__._", "._.__", "..___", "._.__", ".__._", ".___."],
        "L": ["_____", "_____", ".____", ".____", ".____", ".____", ".____", ".____", "....."],
        "M": ["_____", "_____", ".___.", ".._..", "._._.", ".___.", ".___.", ".___.", ".___."],
        "N": ["_____", "_____", ".___.", ".___.", "..__.", "._._.", ".__..", ".___.", ".___."],
        "O": ["_____", "_____", "_..._", ".___.", ".___.", ".___.", ".___.", ".___.", "_..._"],
        "P": ["_____", "_____", "...._", ".___.", ".___.", "...._", ".____", ".____", ".____"],
        "Q": ["_____", "_____", "_..._", ".___.", ".___.", ".___.", ".___.", "._._.", "_..._", "____."],
        "R": ["_____", "_____", "...._", ".___.", ".___.", "...._", "._.__", ".__._", ".___."],
        "S": ["_____", "_____", "_..._", ".___.", ".____", "_..._", "____.", ".___.", "_..._"],
        "T": ["_____", "_____", ".....", "__.__", "__.__", "__.__", "__.__", "__.__", "__.__"],
        "U": ["_____", "_____", ".___.", ".___.", ".___.", ".___.", ".___.", ".___.", "_..._"],
        "V": ["_____", "_____", ".___.", ".___.", ".___.", ".___.", ".___.", "_._._", "__.__"],
        "W": ["_____", "_____", ".___.", ".___.", ".___.", ".___.", "._._.", "._._.", "_._._"],
        "X": ["_____", "_____", ".___.", ".___.", "_._._", "__.__", "_._._", ".___.", ".___."],
        "Y": ["_____", "_____", ".___.", ".___.", "_._._", "__.__", "__.__", "__.__", "__.__"],
        "Z": ["_____", "_____", ".....", "____.", "___._", "__.__", "_.___", ".____", "....."],
        "[": ["_____", "_____", "_..._", "_.___", "_.___", "_.___", "_.___", "_.___", "_..._"],
       "\\": ["_____", "_____", ".____", ".____", "_.___", "__.__", "___._", "____.", "____."],
        "]": ["_____", "_____", "_..._", "___._", "___._", "___._", "___._", "___._", "_..._"],
        "^": ["_____", "_____", "__.__", "_._._", ".___.", "_____", "_____", "_____", "_____"],
        "_": ["_____", "_____", "_____", "_____", "_____", "_____", "_____", "_____", "....."],
        "`": ["_____", "_____", "_.___", "__.__", "_____", "_____", "_____", "_____", "_____"],
        "a": ["_____", "_____", "_____", "_____", "_..._", "____.", "_....", ".___.", "_...."],
        "b": ["_____", "_____", ".____", ".____", "._.._", "..__.", ".___.", ".___.", "...._"],
        "c": ["_____", "_____", "_____", "_____", "_..._", ".___.", ".____", ".___.", "_..._"],
        "d": ["_____", "_____", "____.", "____.", "_.._.", ".__..", ".___.", ".___.", "_...."],
        "e": ["_____", "_____", "_____", "_____", "_..._", ".___.", ".....", ".____", "_...."],
        "f": ["_____", "_____", "___._", "__._.", "__.__", "_..._", "__.__", "__.__", "__.__"],
        "g": ["_____", "_____", "_____", "_____", "_..._", ".___.", ".___.", "_....", "____.", ".___.", "_..._"],
        "h": ["_____", "_____", ".____", ".____", "._.._", "..__.", ".___.", ".___.", ".___."],
        "i": ["_____", "_____", "__.__", "_____", "_..__", "__.__", "__.__", "__.__", "_..._"],
        "j": ["_____", "_____", "___._", "_____", "__.._", "___._", "___._", "___._", ".__._", ".__._", "_.._"],
        "k": ["_____", "_____", ".____", ".____", ".__._", "._.__", "..___", "._.__", ".__._"],
        "l": ["_____", "_____", "_..__", "__.__", "__.__", "__.__", "__.__", "__.__", "_..._"],
        "m": ["_____", "_____", "_____", "_____", ".._._", "._._.", "._._.", "._._.", "._._."],
        "n": ["_____", "_____", "_____", "_____", "._.._", "..__.", ".___.", ".___.", ".___."],
        "o": ["_____", "_____", "_____", "_____", "_..._", ".___.", ".___.", ".___.", "_..._"],
        "p": ["_____", "_____", "_____", "_____", "...._", ".___.", "..__.", "._.._", ".____", ".____", ".____"],
        "q": ["_____", "_____", "_____", "_____", "_....", ".___.", ".__..", "_.._.", "____.", "____.", "____."],
        "r": ["_____", "_____", "_____", "_____", "._.._", "..__.", ".____", ".____", ".____"],
        "s": ["_____", "_____", "_____", "_____", "_....", ".____", "_..._", "____.", "...._"],
        "t": ["_____", "_____", "_.___", "_.___", "...__", "_.___", "_.___", "_.___", "__.._"],
        "u": ["_____", "_____", "_____", "_____", ".___.", ".___.", ".___.", ".__..", "_.._."],
        "v": ["_____", "_____", "_____", "_____", ".___.", ".___.", ".___.", "_._._", "__.__"],
        "w": ["_____", "_____", "_____", "_____", "._._.", "._._.", "._._.", "._._.", "_._._"],
        "x": ["_____", "_____", "_____", "_____", ".___.", "_._._", "__.__", "_._._", ".___."],
        "y": ["_____", "_____", "_____", "_____", ".___.", ".___.", ".___.", "_....", "____.", ".___.", "_..._"],
        "z": ["_____", "_____", "_____", "_____", ".....", "___._", "__.__", "_.___", "....."],
        "{": ["_____", "_____", "___._", "__.__", "__.__", "_.___", "__.__", "__.__", "___._"],
        "|": ["_____", "_____", "__.__", "__.__", "__.__", "__.__", "__.__", "__.__", "__.__"],
        "}": ["_____", "_____", "_.___", "__.__", "__.__", "___._", "__.__", "__.__", "_.___"],
        "~": ["_____", "_____", "_____", "_____", "_.___", "._._.", "___._", "_____", "_____"],
    };

    // panel
    private static DEFAULT_HEIGHT: number = 40;
    private static ROWS          : number =  7;
    private static COLS          : number =  5;
    private static PADDING       : number =  2;
    
    // pixel
    private static padding       : number = 0.5;
    private static radius        : number = Minitron.DEFAULT_HEIGHT/(2 * (Minitron.ROWS + 2 * Minitron.PADDING)) - Minitron.padding;
    private static offset        : number = Minitron.padding + Minitron.radius;
    private static distance      : number = 2 * Minitron.offset;

    private options;
    private message: string;
    private width  : number;
    private height : number;

    private layout;
    private ctxpan;
    private ctxtxt;

    private frame  : number;
    private timeout;

    public constructor ( )
    {
        this.options                      = {
            background: '#000000',
            color     : '#00FFFF',
            speed     : 50
        };

        this.width                        = window.innerWidth;
        this.height                       = Minitron.DEFAULT_HEIGHT;

        this.layout                       = document.createElement('div');
        this.layout.className             = 'minitron';
        this.layout.style.position        = 'fixed';
        this.layout.style.top             = '0';
        this.layout.style.left            = '0';
        this.layout.style.zIndex          = '999999';
        this.layout.style.width           = this.width  + 'px';
        this.layout.style.height          = this.height + 'px';
        this.layout.style.backgroundColor = this.options.background;
        this.layout.style.boxShadow       = '0 0 8px 0 rgba(0,0,0,.5)';

        let canvas1                       = document.createElement('canvas');
        canvas1.className                 = 'minitron-panel';
        canvas1.setAttribute('width' , (this.width) .toString());
        canvas1.setAttribute('height', (this.height).toString());
        canvas1.style.position            = 'absolute';
        this.ctxpan                       = canvas1.getContext('2d');

        let canvas2                       = document.createElement('canvas');
        canvas2.className                 = 'minitron-text';
        canvas2.setAttribute('width' , (this.width) .toString());
        canvas2.setAttribute('height', (this.height).toString());
        canvas2.style.position            = 'absolute';
        this.ctxtxt                       = canvas2.getContext('2d');

        this.frame                        = 0;

        // responsiveness
        let thss                          = this;
        window.addEventListener('resize', function ( ) {
            clearTimeout(thss.timeout);

            thss.width                    = window.innerWidth;
            thss.layout.style.width       = thss.width + 'px';
            canvas1.width                 = thss.width;
            canvas2.width                 = thss.width;

            thss.render();
        });

        this.layout.appendChild(canvas1);
        this.layout.appendChild(canvas2);

        document.body.appendChild(this.layout);
    }

    private renderpanel ( ): void
    {
        for (let x = Minitron.offset ; x < this.width ; x += Minitron.distance)
            for (let y = Minitron.offset ; y < this.height ; y += Minitron.distance)
                this.renderpixel(this.ctxpan, x, y, this.options.off);
    }

    private rendertext  ( ): void
    {
        this.ctxtxt.clearRect(0, 0, this.width, this.height);
        
        let u = this.width - Minitron.distance * (this.frame),
            x = u,
            y = Minitron.offset;

        for (let i = 0 ; i < this.message.length ; ++i) 
        {
            let char = Minitron.CHARSET[this.message.charAt(i)] || Minitron.CHARSET['?'];
            for (let j = 0 ; j < char.length ; ++j)
            {
                for (let k = 0 ; k < char[j].length && x < this.width ; ++k, x += Minitron.distance)
                    if (char[j].charAt(k) === '.')
                        this.renderpixel(this.ctxtxt, x, y, this.options.color);
                x  = u;
                y += Minitron.distance;
            }

            u += Minitron.distance * (Minitron.COLS + 1);
            x  = u;
            y  = Minitron.offset;
        }

        this.frame   = u < 0 ? 0 : this.frame + 1;

        let thss     = this;
        this.timeout = setTimeout(function ( ) { thss.rendertext  ( ) }, this.options.speed);
    }

    private renderpixel (context, x: number, y: number, state: string): void
    {
        context.beginPath();
        context.arc(x, y, Minitron.radius, 0, Constant.TAO);
        context.fillStyle = state;
        context.fill();
        context.closePath();
    }

    public setMessage (message: string): Minitron
    {
        this.message = message;

        return this;
    }

    public setOptions (options: Object): Minitron
    {
        for (let key in options)
            this.options[key] = options[key];

        this.options.off = Color.hex2ARGBString(this.options.color, 0.2);

        return this;
    }

    private render ( ): void
    {
        this.renderpanel();
        this.rendertext ();
    }

    private static make (message, options): Minitron
    {
        let minitron: Minitron = new Minitron();

        minitron.setMessage(message)
                .setOptions(options)
                .render();

        return minitron;
    }
}